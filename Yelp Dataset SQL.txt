Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
		SELECT COUNT(*)
		FROM table_Name 

		Example : SELECT Count(*)
			  FROM attribute
		
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table =10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.
	
		SELECT COUNT(DISTINCT(primarykey))
		FROM table 
		
		Example: SELECT COUNT(DISTINCT(id))
		FROM business 
		

i. Business = 10000
ii. Hours = 1562
iii. Category = 2643
iv. Attribute = 1115
v. Review = 10000
vi. Checkin = 493
vii. Photo = 10000 (business_id = 6493) 
viii. Tip = 537 (business_id = 3979)
ix. User =  10000
x. Friend = 11
xi. Elite_years = 2780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: No (0)
	
	
	SQL code used to arrive at answer: 

		SELECT COUNT(*)
		FROM user
		WHERE id IS NULL OR 
		  name IS NULL OR 
                 
		  review_count IS NULL OR 
		  yelping_since IS NULL OR
		  useful IS NULL OR 
		  funny IS NULL OR 
		  cool IS NULL OR 
		  fans IS NULL OR 
		  average_stars IS NULL OR 
   		   compliment_hot IS NULL OR 
		  compliment_more IS NULL OR 
		  compliment_profile IS NULL OR 
		  compliment_cute IS NULL OR 
		  compliment_list IS NULL OR 
		  compliment_note IS NULL OR 
		  compliment_plain IS NULL OR 
		  compliment_cool IS NULL OR 
		  compliment_funny IS NULL OR 
		  compliment_writer IS NULL OR 
		  compliment_photos IS NULL
		
	
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

		SELECT MIN/MAX/AVG(column_name)
		FROM table

		Example: SELECT min(stars)
			 FROM review

	i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min:	1	max:	5	avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min:	0	max:	2	avg:0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min:	1	max:	53	avg: 1.941
		
	
	v. Table: User, Column: Review_count
	
		min:	0	max:	2000	avg: 24.299
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer: SELECT city, 
						sum(review_count) AS total_reviews
						FROM business
						GROUP BY city
						ORDER BY total_review DESC
	
	
	Copy and Paste the Result Below:
 
	+-----------------+---------------+
| city            | total_reviews |
+-----------------+---------------+
| Las Vegas       |         82854 |
| Phoenix         |         34503 |
| Toronto         |         24113 |
| Scottsdale      |         20614 |
| Charlotte       |         12523 |
| Henderson       |         10871 |
| Tempe           |         10504 |
| Pittsburgh      |          9798 |
| Montréal        |          9448 |
| Chandler        |          8112 |
| Mesa            |          6875 |
| Gilbert         |          6380 |
| Cleveland       |          5593 |
| Madison         |          5265 |
| Glendale        |          4406 |
| Mississauga     |          3814 |
| Edinburgh       |          2792 |
| Peoria          |          2624 |
| North Las Vegas |          2438 |
| Markham         |          2352 |
| Champaign       |          2029 |
| Stuttgart       |          1849 |
| Surprise        |          1520 |
| Lakewood        |          1465 |
| Goodyear        |          1155 |
+-----------------+---------------+
(Output limit exceeded, 25 of 362 total rows shown)

	
	

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

SELECT 
stars AS star_rating
SUM(review_count) AS count
FROM business
WHERE city = "Avon"
GROUP BY stars


Copy and Paste the Resulting Table Below (2 columns – star rating and count):

+-------------+-------+
| star_rating | count |
+-------------+-------+
|         1.5 |    10 |
|         2.5 |     6 |
|         3.5 |    88 |
|         4.0 |    21 |
|         4.5 |    31 |
|         5.0 |     3 |
+-------------+-------+

ii. Beachwood

SQL code used to arrive at answer:

SELECT 
stars AS star_rating, 
SUM(review_count) AS count
FROM business
WHERE city = "Beachwood"
GROUP BY stars



Copy and Paste the Resulting Table Below (2 columns – star rating and count):

+-------------+-------+
| star_rating | count |
+-------------+-------+
|         2.0 |     8 |
|         2.5 |     3 |
|         3.0 |    11 |
|         3.5 |     6 |
|         4.0 |    69 |
|         4.5 |    17 |
|         5.0 |    23 |
+-------------+-------+
		


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:

SELECT id,
name, 
review_count
FROM user
ORDER BY review_count DESC
LIMIT 3
	
		
	Copy and Paste the Result Below:

+------------------------+--------+--------------+
| id                     | name   | review_count |
+------------------------+--------+--------------+
| -G7Zkl1wIWBBmD0KRy_sCw | Gerald |         2000 |
| -3s52C4zL_DHRK0ULG6qtg | Sara   |         1629 |
| -8lbUNlXVSoXqaRRiHiSNg | Yuri   |         1339 |
+------------------------+--------+--------------+
		


8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:

CODE: SELECT 
    name, 
    SUM(review_count) AS total_reviews, 
    fans 
    FROM user
    GROUP BY id
    ORDER BY total_reviews DESC

OUTPUT: 

+-----------+---------------+------+
| name      | total_reviews | fans |
+-----------+---------------+------+
| Gerald    |          2000 |  253 |
| Sara      |          1629 |   50 |
| Yuri      |          1339 |   76 |
| .Hon      |          1246 |  101 |
| William   |          1215 |  126 |
| Harald    |          1153 |  311 |
| eric      |          1116 |   16 |
| Roanna    |          1039 |  104 |
| Mimi      |           968 |  497 |
| Christine |           930 |  173 |
| Ed        |           904 |   38 |
| Nicole    |           864 |   43 |
| Fran      |           862 |  124 |
| Mark      |           861 |  115 |
| Christina |           842 |   85 |
| Dominic   |           836 |   37 |
| Lissa     |           834 |  120 |
| Lisa      |           813 |  159 |
| Alison    |           775 |   61 |
| Sui       |           754 |   78 |
| Tim       |           702 |   35 |
| L         |           696 |   10 |
| Angela    |           694 |  101 |
| Crissy    |           676 |   25 |
| Lyn       |           675 |   45 |
+-----------+---------------+------+

After running the query to find any correlation between more reviews posing more fans, the findings present that their is no correlation as maximum reviews has less fans and less reviews got more fans. Answer is NO CORRELATION.
	

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: Review with word Love = 1780 and review with word hate = 178
		Therefore, review has more "Love" Word.

	
	SQL code used to arrive at answer:

SELECT  
    review_words, 
    COUNT(*) AS total_count
FROM (SELECT 
      CASE  WHEN text LIKE "%love%" THEN "love"
            WHEN text LIKE "%hate%" THEN "hate"
            ELSE "Nothing"
            END review_words
      FROM review)
GROUP BY review_words

	
	
10. Find the top 10 users with the most fans:

SQL code used to arrive at answer: 

SELECT name,
SUM(fans) AS Total_Fans
FROM user
Group by id
ORDER BY Total_Fans DESC
LIMIT 10
	
	
Copy and Paste the Result Below:

+-----------+------------+
| name      | Total_Fans |
+-----------+------------+
| Amy       |        503 |
| Mimi      |        497 |
| Harald    |        311 |
| Gerald    |        253 |
| Christine |        173 |
| Lisa      |        159 |
| Cat       |        133 |
| William   |        126 |
| Fran      |        124 |
| Lissa     |        120 |
+-----------+------------+
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.

I am choosing "Toronto" as city and "Food" as category.


	
i. Do the two groups you chose to analyze have a different distribution of hours?

SELECT  CASE WHEN stars >= 4 THEN "4-5 stars"
             WHEN stars >= 2 THEN "2-3 stars"
             ELSE "below 2"
             END ranking,
       city, 
        c.category,
        count(distinct business.id) AS co_count,
        count(h.hours) AS working_hours
FROM business
JOIN hours h ON business.id = h.business_id
JOIN category c ON business.id = c.business_id
WHERE city = "Toronto" AND c.category = "Food"
GROUP BY ranking 


+-----------+---------+----------+----------+---------------+
| ranking   | city    | category | co_count | working_hours |
+-----------+---------+----------+----------+---------------+
| 2-3 stars | Toronto | Food     |        1 |             7 |
| 4-5 stars | Toronto | Food     |        2 |            13 |
+-----------+---------+----------+----------+---------------+

Yes, the distribution hours are different. For 2-3 star ranked has 7 working hours and 4-5 star ranked has working hours. There can be potential correlation between star rank and working hours.

ii. Do the two groups you chose to analyze have a different number of reviews?
         

SELECT  CASE WHEN stars >= 4 THEN "4-5 stars"
             WHEN stars >= 2 THEN "2-3 stars"
             ELSE "below 2"
             END ranking,
        city, 
        c.category,
        count(distinct business.id) AS co_count,
        sum(review_count) AS total_reviews
FROM business
JOIN category c ON business.id = c.business_id
WHERE city = "Toronto" AND c.category = "Food"
GROUP BY ranking

+-----------+---------+----------+----------+---------------+
| ranking   | city    | category | co_count | total_reviews |
+-----------+---------+----------+----------+---------------+
| 2-3 stars | Toronto | Food     |        2 |            13 |
| 4-5 stars | Toronto | Food     |        2 |            41 |
+-----------+---------+----------+----------+---------------+
         
Yes, there is drastic difference between the reviews of 2-3 star and 4-5 stars.

iii. Are you able to infer anything from the location data provided between these two groups? Explain.

+-----------+----------------------+-----------------+---------+-------------+
| ranking   | address              | neighborhood    | city    | postal_code |
+-----------+----------------------+-----------------+---------+-------------+
| 2-3 stars | 2280 Dundas Street W | Roncesvalles    | Toronto | M6R 1X3     |
| 2-3 stars | 3003 Bathurst Street |                 | Toronto | M6B         |
| 4-5 stars | 247 Wallace Avenue   | Wallace Emerson | Toronto | M6H 1V5     |
| 4-5 stars | 1669 Bloor Street W  | High Park       | Toronto | M6P 1A6     |
+-----------+----------------------+-----------------+---------+-------------+

Not really, but "3003 Bathurst Street" does not have proper information as Postal_code seems incorrect and neighbourhood data is missing.

SQL code used for analysis:

SELECT  CASE WHEN stars >= 4 THEN "4-5 stars"
             WHEN stars >= 2 THEN "2-3 stars"
             ELSE "below 2"
             END ranking,
        address,
        neighborhood,
        city,
        Postal_code
FROM business
JOIN category c ON business.id = c.business_id
WHERE city = "Toronto" AND c.category = "Food"
ORDER BY ranking

		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:

First one is the total number of review of open business are far more than the close ones.       
         
ii. Difference 2:
         
Second reason is average ranking, tough there is no huge margin but open businesses have more ranking/rating than the close ones.      
         
SQL code used for analysis:

SELECT 

CASE    WHEN is_open = 1 THEN "OPEN"
        WHEN is_open = 0 THEN "CLOSED"
        END status, 
        count(distinct id) AS New_id,
        sum(review_count) AS total_reviews,
		AVG(stars) as avg_ranking
FROM business
GROUP BY is_open
ORDER BY status


+--------+--------+---------------+-------------------+
| status | New_id | total_reviews |       avg_ranking |
+--------+--------+---------------+-------------------+
| CLOSED |   1520 |         35261 | 3.520394736842105 |
| OPEN   |   8480 |        269300 | 3.679009433962264 |
+--------+--------+---------------+-------------------+
	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:

Identifying the most successful categories with average rating above 4 with maximum reviews. 

               
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:

For the analysis, four main attributes were chosen. Categories, Companies_count, Average_ranking and total review. To better understand, the average rating was chosen above 4 because a good category must
Be having good rating to be successful. Secondly, maximum total review with the company_count shoes that highest number business with best reviews in the city. Considering all the factors to identify which category
Excels these particular attributes were chosen.                         
                  
iii. Output of your finished dataset:

+------------------+---------------+-------------------+---------------+
| category         | total_company |         avg_stars | total_reviews |
+------------------+---------------+-------------------+---------------+
| Health & Medical |            17 | 4.088235294117647 |           203 |
| Local Services   |            12 | 4.208333333333333 |           100 |
| Home Services    |            16 |               4.0 |            94 |
+------------------+---------------+-------------------+---------------+
         
         
iv. Provide the SQL code you used to create your final dataset:

SELECT
    category,
    count(distinct id) AS total_company,
    avg(stars)AS avg_stars,
    sum(review_count) AS total_reviews
FROM business
JOIN category ON business.id = category.business_id
GROUP BY category
HAVING avg_stars >= 4 and total_company > 10
ORDER BY total_reviews DESC